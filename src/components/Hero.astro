---
import {
  siteConfig,
  supportedLanguages,
  defaultLanguage,
} from "../config";

const greetings = {
  en: "Hello! ðŸ‘‹",
  de: "Hallo! ðŸ‘‹",
} as const;
---

<div
  id="hero"
  class="relative isolate overflow-hidden py-24 md:h-screen"
  style={`--accent-color: ${siteConfig.accentColor}`}
>
  <div class="h-full mx-auto p-8 sm:p-12 md:p-24 flex items-center">
    <div>
      {supportedLanguages.map((lang) => (
        <div
          class={`lang lang-${lang}`}
          data-hero-lang={lang}
          hidden={lang !== defaultLanguage}
          key={lang}
        >
          <h2
            class="text-pretty text-xl sm:text-2xl md:text-5xl font-bold tracking-tight text-gray-700 animate-fade-in"
          >
            {greetings[lang]}
          </h2>
          <h1
            class="mt-6 sm:mt-8 md:mt-10 text-pretty text-4xl sm:text-5xl md:text-6xl lg:text-8xl font-bold tracking-tight text-gray-800 animate-fade-in animation-delay-200"
          >
            {lang === "en" ? "I'm" : "Ich bin"}{" "}
            <span
              class="typewriter"
              style={`color: ${siteConfig.accentColor}; --caret-color: ${siteConfig.accentColor};`}
            >
              {siteConfig.name[lang]}
            </span>
          </h1>
          <p
            class="mt-4 sm:mt-6 md:mt-8 text-pretty text-base sm:text-lg md:text-xl/8 font-medium text-gray-600 animate-fade-in animation-delay-400"
          >
            {siteConfig.title[lang]}
          </p>
        </div>
      ))}
    </div>
  </div>
  <div
    class="absolute bottom-0 left-0 right-0 p-8 sm:p-12 md:p-24 flex gap-x-4 sm:gap-x-6 md:gap-x-8 text-gray-700 animate-fade-in animation-delay-600"
  >
    {
      siteConfig.social?.email && (
        <a
          href={`mailto:${siteConfig.social.email}`}
          aria-label="Email"
          class="transition-colors duration-300 hover:text-[var(--accent-color)]"
        >
          <svg
            xmlns="http://www.w3.org/2000/svg"
            width="24"
            height="24"
            viewBox="0 0 24 24"
            fill="none"
            stroke="currentColor"
            stroke-width="2"
            stroke-linecap="round"
            stroke-linejoin="round"
            class="h-6 w-6 sm:h-7 sm:w-7 md:h-8 md:w-8"
          >
            <path stroke="none" d="M0 0h24v24H0z" fill="none" />
            <path d="M3 7a2 2 0 0 1 2 -2h14a2 2 0 0 1 2 2v10a2 2 0 0 1 -2 2h-14a2 2 0 0 1 -2 -2v-10z" />
            <path d="M3 7l9 6l9 -6" />
          </svg>
        </a>
      )
    }
    {
      siteConfig.social?.linkedin && (
        <a
          href={siteConfig.social.linkedin}
          target="_blank"
          rel="noopener noreferrer"
          aria-label="LinkedIn"
          class="transition-colors duration-300 hover:text-[var(--accent-color)]"
        >
          <svg
            xmlns="http://www.w3.org/2000/svg"
            width="24"
            height="24"
            viewBox="0 0 24 24"
            fill="none"
            stroke="currentColor"
            stroke-width="2"
            stroke-linecap="round"
            stroke-linejoin="round"
            class="h-6 w-6 sm:h-7 sm:w-7 md:h-8 md:w-8"
          >
            <>
              <path stroke="none" d="M0 0h24v24H0z" fill="none" />
              <path d="M8 11v5" />
              <path d="M8 8v.01" />
              <path d="M12 16v-5" />
              <path d="M16 16v-3a2 2 0 1 0 -4 0" />
              <path d="M3 7a4 4 0 0 1 4 -4h10a4 4 0 0 1 4 4v10a4 4 0 0 1 -4 4h-10a4 4 0 0 1 -4 -4z" />
            </>
          </svg>
        </a>
      )
    }
    {
      siteConfig.social?.github && (
        <a
          href={siteConfig.social.github}
          target="_blank"
          rel="noopener noreferrer"
          aria-label="GitHub"
          class="transition-colors duration-300 hover:text-[var(--accent-color)]"
        >
          <svg
            xmlns="http://www.w3.org/2000/svg"
            width="24"
            height="24"
            viewBox="0 0 24 24"
            fill="none"
            stroke="currentColor"
            stroke-width="2"
            stroke-linecap="round"
            stroke-linejoin="round"
            class="h-6 w-6 sm:h-7 sm:w-7 md:h-8 md:w-8"
          >
            <>
              <path stroke="none" d="M0 0h24v24H0z" fill="none" />
              <path d="M9 19c-4.3 1.4 -4.3 -2.5 -6 -3m12 5v-3.5c0 -1 .1 -1.4 -.5 -2c2.8 -.3 5.5 -1.4 5.5 -6a4.6 4.6 0 0 0 -1.3 -3.2a4.2 4.2 0 0 0 -.1 -3.2s-1.1 -.3 -3.5 1.3a12.3 12.3 0 0 0 -6.2 0c-2.4 -1.6 -3.5 -1.3 -3.5 -1.3a4.2 4.2 0 0 0 -.1 3.2a4.6 4.6 0 0 0 -1.3 3.2c0 4.6 2.7 5.7 5.5 6c-.6 .6 -.6 1.2 -.5 2v3.5" />
            </>
          </svg>
        </a>
      )
    }
  </div>
</div>

<script is:inline>
  const typingTimers = new WeakMap();

  const resetTypewriter = (element) => {
    const timer = typingTimers.get(element);
    if (typeof timer === "number") {
      window.clearTimeout(timer);
      typingTimers.delete(element);
    }

    const original = element.dataset.original ?? element.textContent ?? "";
    if (!element.dataset.original) {
      element.dataset.original = original;
    }

    if (element.dataset.original) {
      element.textContent = element.dataset.original;
    }

    element.classList.remove("typewriter-running");
  };

  const startTypewriter = (element) => {
    const original = element.dataset.original ?? element.textContent ?? "";
    if (!original) return;

    resetTypewriter(element);
    element.textContent = "";
    element.classList.add("typewriter-running");

    let index = 0;

    const step = () => {
      if (element.closest("[hidden]")) {
        resetTypewriter(element);
        return;
      }

      if (index < original.length) {
        element.textContent += original.charAt(index);
        index += 1;
        const timeoutId = window.setTimeout(step, 80);
        typingTimers.set(element, timeoutId);
      } else {
        element.classList.remove("typewriter-running");
        typingTimers.delete(element);
      }
    };

    step();
  };

  const cleanupTypewriters = () => {
    document.querySelectorAll("#hero .typewriter").forEach((element) => {
      resetTypewriter(element);
    });
  };

  const runTypewriters = () => {
    document.querySelectorAll("#hero .typewriter").forEach((element) => {
      if (!element.dataset.original) {
        element.dataset.original = element.textContent ?? "";
      }

      if (element.closest("[hidden]")) {
        resetTypewriter(element);
        return;
      }

      startTypewriter(element);
    });
  };

  const scheduleTypewriters = () => {
    requestAnimationFrame(() => {
      requestAnimationFrame(runTypewriters);
    });
  };

  document.addEventListener("DOMContentLoaded", scheduleTypewriters, {
    once: true,
  });
  document.addEventListener("astro:after-swap", () => {
    cleanupTypewriters();
    scheduleTypewriters();
  });
  document.addEventListener("astro:before-swap", cleanupTypewriters);
  document.addEventListener("languagechange", () => {
    cleanupTypewriters();
    scheduleTypewriters();
  });
</script>

<style>
  @keyframes fadeIn {
    from {
      opacity: 0;
      transform: translateY(20px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }

  .animate-fade-in {
    animation: fadeIn 0.8s ease-out forwards;
    opacity: 0;
  }

  .animation-delay-200 {
    animation-delay: 0.2s;
  }

  .animation-delay-400 {
    animation-delay: 0.4s;
  }

  .animation-delay-600 {
    animation-delay: 0.6s;
  }

  .typewriter {
    display: inline-block;
    position: relative;
    white-space: nowrap;
    overflow: hidden;
    padding-right: 0.2rem;
  }

  .typewriter::after {
    content: "";
    position: absolute;
    top: 0;
    right: 0.05rem;
    bottom: 0;
    width: 2px;
    background-color: var(--caret-color, #1d4ed8);
    opacity: 0;
    transition: opacity 0.2s ease;
  }

  .typewriter.typewriter-running::after {
    opacity: 1;
    animation: caret-blink 0.8s steps(1) infinite;
  }

  @keyframes caret-blink {
    0%,
    50% {
      opacity: 1;
    }
    50.01%,
    100% {
      opacity: 0;
    }
  }
</style>
